name: Publish Notion website to GitHub Pages

on:
  # This workflow will only run when manually triggered from the GitHub Actions tab.
  workflow_dispatch:

permissions:
  # Allows the workflow to write to your repository, necessary for gh-pages.
  contents: write

jobs:
  deploy:
    # Runs the job on the latest Ubuntu environment provided by GitHub Actions.
    runs-on: ubuntu-latest
    steps:
      # Step 1: Checkout the Loconotion repository itself.
      # This provides the loconotion.py script and its requirements.txt.
      - name: Checkout loconotion
        uses: actions/checkout@v3
        with:
          repository: leoncvlt/loconotion
          path: loconotion # Clones Loconotion into a 'loconotion' directory

      # Step 2: Checkout your actual website repository (ravelforguitar).
      # This gives the workflow access to your site.toml and where to put output.
      - name: Checkout this repo
        uses: actions/checkout@v3
        with:
          path: pages_repo # Clones your repo into a 'pages_repo' directory

      # Step 3: Install all necessary Python dependencies.
      # This is the crucial step where we ensure Loconotion has everything it needs.
      - name: Install Loconotion dependencies
        run: |
          # Upgrade pip to the latest version first. This can help with dependency resolution.
          python3 -m pip install --upgrade pip

          # Install all dependencies specified in Loconotion's own requirements.txt.
          # This will install 'chromedriver-autoinstaller==0.2.0' (or whatever version it specifies).
          pip install -r loconotion/requirements.txt

          # Crucially, force an upgrade of chromedriver-autoinstaller.
          # This overrides the older version from Loconotion's requirements.txt
          # with a newer, more compatible one (0.6.4), resolving conflicts.
          # We don't need to specify a hash here as it's a direct 'pip install' command.
          pip install --upgrade chromedriver_autoinstaller==0.6.4

      # Step 4: Run Loconotion to generate the static website files.
      # It reads your site.toml from 'pages_repo' and outputs to a 'dist' folder.
      - name: Run Loconotion
        run: |
          # The --chromedriver chromedriver flag might still be necessary for the specific
          # version of Loconotion being used, even with chromedriver_autoinstaller.
          # Chromedriver_autoinstaller ensures the 'chromedriver' executable is available.
          python3 loconotion/loconotion --chromedriver chromedriver "pages_repo/site.toml"
        # Ensure this step runs from the 'loconotion' directory to find the script correctly.
        working-directory: loconotion # Added/Confirmed this working directory

      # Step 5: Push the generated static files to the gh-pages branch.
      # This uses the deploy.sh script provided by the template to handle the Git operations.
      - name: Push to GitHub pages
        run: |
          # Configure Git user for the commit
          git config --global user.name "github-actions[bot]"
          git config --global user.email "41898282+github-actions[bot]@users.noreply.github.com"
          # Execute the deploy.sh script with necessary environment variables
          # GIT_DEPLOY_DIR points to where Loconotion outputs the site within 'pages_repo'.
          GIT_DEPLOY_DIR=dist \
          GIT_DEPLOY_BRANCH=gh-pages \
          GIT_DEPLOY_REPO="https://${{ github.token }}@github.com/${{ github.repository }}.git" ../loconotion/deploy.sh
        # This step needs to run from the 'pages_repo' to find the generated 'dist' folder.
        working-directory: pages_repo
